{"version":3,"sources":["../src/max-appearence-count-of-words.js"],"names":[],"mappings":";;;;;;;;sBAA4B,QAAQ;;yBACT,WAAW;;AAEtC,IAAM,cAAc,GAAG;AACrB,OAAK,EAAE,CAAC;AACR,MAAI,EAAE,IAAI;CACX,CAAC;;AAEF,SAAS,WAAW,CAAC,KAAK,EAAE;AAC1B,SAAO,KAAK,CAAC,GAAG,KAAK,IAAI,IACpB,KAAK,CAAC,YAAY,KAAK,GAAG,IAC1B,KAAK,CAAC,YAAY,KAAK,KAAK,IAC5B,KAAK,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC;CACpC;;AAED,SAAS,YAAY,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,EAAe;MAAb,IAAI,yDAAG,IAAI;;AACnD,UAAO,IAAI;AACT,SAAK,IAAI;AACP,mBAAW,IAAI,UAAK,KAAK,YAAO,KAAK,iBAAc;AAAA,AACrD;AACE,aAAU,IAAI,sBAAiB,KAAK,4BAAuB,KAAK,CAAG;AAAA,GACtE;CACF;;qBAEc,UAAU,OAAO,EAAgB;MAAd,OAAO,yDAAG,EAAE;MACnC,MAAM,GAAkC,OAAO,CAA/C,MAAM;MAAE,MAAM,GAA0B,OAAO,CAAvC,MAAM;MAAE,SAAS,GAAe,OAAO,CAA/B,SAAS;MAAE,SAAS,GAAI,OAAO,CAApB,SAAS;;AAE3C,SAAO,GAAG,oBAAO,EAAE,EAAE,cAAc,EAAE,OAAO,CAAC,CAAC;;AAE9C,MAAI,oBAAoB,GAAG,CAAC,CAAC;AAC7B,6BACK,MAAM,CAAC,SAAS,EAAC,UAAC,IAAI,EAAC;AACtB,QAAM,cAAc,GAAG,EAAE,oBAAoB,CAAC;AAC9C,QAAM,SAAS,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC;;;AAGlC,WAAO,8BAAc,CAAC,IAAI,CAAC,UAAA,SAAS,EAAI;AACtC,UAAM,MAAM,GAAG,SAAS,CAAC,mBAAmB,CAAC,SAAS,CAAC,CAAC;;AAExD,yBAAM,MAAM,CAAC,CACV,IAAI,CAAC,UAAA,KAAK;eAAI,KAAK,CAAC,YAAY;OAAA,CAAC,CACjC,MAAM,CAAC,WAAW,CAAC,CACnB,MAAM,CAAC,UAAA,KAAK;eAAI,AAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,MAAM,GAAG,CAAC,GAAI,OAAO,CAAC,KAAK;OAAA,CAAC,CACjF,OAAO,CAAC,UAAA,KAAK;eAAI,MAAM,CAAC,IAAI,EAAE,IAAI,SAAS,CAAC,YAAY,CAAC,KAAK,CAAC,YAAY,EAAE,cAAc,EAAE,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;OAAA,CAAC,CAC5H,KAAK,EAAE,CAAC;KACZ,CAAC,CAAC;GACJ,EACJ;CACJ;;AAAA,CAAC","file":"max-appearence-count-of-words.js","sourcesContent":["import {assign, chain} from 'lodash';\nimport {getTokenizer} from 'kuromojin';\n\nconst defaultOptions = {\n  limit: 4,\n  lang: 'en'\n};\n\nfunction filterToken(token) {\n  return token.pos === '名詞'\n    && token.pos_detail_1 !== '数'\n    && token.pos_detail_1 !== '非自立'\n    && token.surface_form.length > 1;\n}\n\nfunction formatReport(word, count, limit, lang = 'en') {\n  switch(lang) {\n    case 'ja':\n      return `「${word}」が${count}段落目で${limit}回以上登場しています。`;\n    default:\n      return `${word} appears over ${limit} count in Paragraph ${count}`;\n  }\n}\n\nexport default function (context, options = {}) {\n    const {Syntax, report, getSource, RuleError} = context;\n\n    options = assign({}, defaultOptions, options);\n\n    let globalParagraphCount = 0;\n    return {\n        [Syntax.Paragraph](node){\n          const paragraphCount = ++globalParagraphCount;\n          const paragraph = getSource(node);\n\n          // 非同期でkuromoji.jsの初期化&ロック&キャッシュ\n          return getTokenizer().then(tokenizer => {\n            const tokens = tokenizer.tokenizeForSentence(paragraph);\n\n            chain(tokens)\n              .uniq(token => token.surface_form)\n              .filter(filterToken)\n              .filter(token => (paragraph.split(token.surface_form).length - 1) > options.limit)\n              .forEach(token => report(node, new RuleError(formatReport(token.surface_form, paragraphCount, options.limit, options.lang))))\n              .value();\n          });\n        }\n    }\n};\n"]}